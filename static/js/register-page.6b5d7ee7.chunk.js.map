{"version":3,"file":"static/js/register-page.6b5d7ee7.chunk.js","mappings":"6MAGaA,EAAMC,EAAAA,EAAAA,IAAU,qfAuBhBC,EAAYD,EAAAA,EAAAA,GAAS,6IAQrBE,GAAeF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAY,gEAK3BI,EAAYJ,EAAAA,EAAAA,MAAY,6HAQxBK,GAAYL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAc,8RAe1BO,EAAaP,EAAAA,EAAAA,OAAa,oQAc1BQ,EAAOR,EAAAA,EAAAA,EAAQ,2G,UCrD5B,EArBiCS,EAAAA,GAAW,CACxCC,MAAOD,EAAAA,KAEFC,MAAM,uBACNC,SAAS,qBACdC,KAAMH,EAAAA,KAEDE,SAAS,yBACdE,SAAUJ,EAAAA,KAELK,IAAI,EAAG,qDACPH,SAAS,wBACdI,MAAON,EAAAA,KAEFE,SAAS,4BACdK,gBAAiBP,EAAAA,KAEZK,IAAI,EAAG,qDACPH,SAAS,0B,iDCTH,SAASM,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAkBXC,EAAc,SAAAC,GAAO,OAAIC,EAAAA,OAAAA,KAAY,GAAD,OAAID,GAAW,EAEzD,OACI,UAACtB,EAAG,YACA,SAACE,EAAS,2DAEV,SAAC,KAAM,CACPsB,cAtBc,CAClBX,KAAM,GACNF,MAAO,GACPK,MAAO,GACPF,SAAU,GACVG,gBAAiB,IAkBbQ,SAda,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,UAC5BC,QAAQC,IAAIH,GACZP,EAASW,EAAAA,EAAAA,SAAoBJ,IAC7BC,GACJ,EAWQI,iBAAkBC,EAAyB,UAE3C,UAAC7B,EAAY,CAAC8B,aAAa,MAAK,WACxB,UAAC5B,EAAS,CAAC6B,QAAQ,OAAM,kBAErB,SAAC5B,EAAS,CAAC6B,KAAK,OACZtB,KAAK,OACLuB,YAAY,qBAGpB,SAAC,KAAY,CAACvB,KAAK,OAAOwB,OAAQhB,KAElC,UAAChB,EAAS,CAAC6B,QAAQ,QAAO,mBAEtB,SAAC5B,EAAS,CACN6B,KAAK,QACLtB,KAAK,QACLuB,YAAY,0BAGpB,SAAC,KAAY,CAACvB,KAAK,QAAQwB,OAAQhB,KAEnC,UAAChB,EAAS,CAAC6B,QAAQ,QAAO,mBAEtB,SAAC5B,EAAS,CACN6B,KAAK,QACLtB,KAAK,QACLuB,YAAY,sBAGpB,SAAC,KAAY,CAACvB,KAAK,QAAQwB,OAAQhB,KAEnC,UAAChB,EAAS,CAAC6B,QAAQ,WAAU,sBAEzB,SAAC5B,EAAS,CACN6B,KAAK,WACLtB,KAAK,WACLuB,YAAY,yBAGpB,SAAC,KAAY,CAACvB,KAAK,WAAWwB,OAAQhB,KAEtC,UAAChB,EAAS,CAAC6B,QAAQ,kBAAiB,6BAEhC,SAAC5B,EAAS,CACN6B,KAAK,WACLtB,KAAK,kBACLuB,YAAY,wBAGpB,SAAC,KAAY,CAACvB,KAAK,kBAAkBwB,OAAQhB,KAE7C,SAACb,EAAU,CAAC2B,KAAK,SAAQ,4BAIjC,SAAC1B,EAAI,qCACL,SAACA,EAAI,WACD,SAAC,KAAI,CAAC6B,GAAG,SACLC,MAAO,CAAEC,eAAgB,OAAQC,SAAU,GAAIC,MAAO,WAAY,uBAKtF,C,gBCpGa1C,EAAMC,EAAAA,EAAAA,IAAU,ySAKD0C,GCG5B,EARqB,WACjB,OACI,SAAC,EAAG,WACA,SAAC,EAAY,KAGzB,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","services/validationSchemaRegister.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field  } from 'formik';\n\nexport const Box = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    display: flex;\n    text-align: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin-top: 200px;\n    max-width: 380px;\n    max-height: 580px;\n    background-color: #03c03c;\n    border-radius: 15px;\n    padding: 20px;\n    margin-left: auto;\n    margin-right: auto;\n    background-repeat: no-repeat;\n    background-position: 50% 50%;\n    background-size: cover;\n`;\n\nexport const FormTitle = styled.h3`\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    margin-top: auto;\n`;\n\nexport const RegisterForm = styled(Form)`\n    display: block;\n    width: 320px;\n`;\n\nexport const LableForm = styled.label`\n    \n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 12px,\n`;\n\nexport const InputForm = styled(Field )`\n    display: flex;\n    border: 0px;\n    box-sizing: content-box;\n    outline: none;\n    padding: 10px;\n    flex-direction: column;\n    margin-bottom: 12px;\n    border-radius: 5px;\n    &:hover,\n    &:focus {\n        background-color: #9acfc2c1;\n    }\n`;\n\nexport const FormButton = styled.button`\n    padding: 10px 20px;\n    border-radius: 10px 2px;\n    border: 0px;\n    outline: none;\n    cursor: pointer;\n    &:hover,\n    &:focus {\n        outline: none;\n        background-color: #139397;\n        color: #ffffff;\n    }\n`;\n\nexport const Text = styled.p`\n    display:block;\n    width:100%;\n    margin: 0px;\n    text-decoration: none;\n`","import * as yup from 'yup';\n\nconst validationSchemaRegister = yup.object({\n    email: yup\n        .string()\n        .email('Enter a valid email')\n        .required('Email is required'),\n    name: yup\n        .string()\n        .required('Full name is required'),\n    password: yup\n        .string()\n        .min(8, 'Password should be of minimum 8 characters length')\n        .required('Password is required'),\n    phone: yup\n        .string()\n        .required('Phone number is required'),\n    repeat_password: yup\n        .string()\n        .min(8, 'Password should be of minimum 8 characters length')\n        .required('Password is required'),\n});\n\nexport default validationSchemaRegister;\n\n// .matches(\n//             /^(?:\\+38)?(0\\d{9})$/,\n//             'Please enter your phone number as in example: +38XXXXXXXXX',\n//         )\n\n//  .matches(\n//             /^[A-Z][a-z]*(\\s[A-Z][a-z]*)+$|^[А-Я][а-я]*(\\s[А-я][а-я]*)+$/gms,\n//             'Please enter your full name as in example: John Doue',\n//         )","// import { useState } from 'react';\nimport { LableForm, Box, RegisterForm, FormTitle, InputForm, FormButton, Text } from \"./RegisterForm.styled\";\nimport { Formik, ErrorMessage } from 'formik';\nimport validationSchemaRegister from '../../services/validationSchemaRegister';\nimport { Link } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useDispatch } from 'react-redux';\nimport  operations  from '../../redux/auth/authOperations';\n\n\n\nexport default function RegisterPage() {\n    const dispatch = useDispatch();\n\n\n    const initialValues = {\n        name: '',\n        email: '',\n        phone: '',\n        password: '',\n        repeat_password: ''\n    };\n\n\n    const handleSubmit = (values, { resetForm }) => {\n        console.log(values);\n        dispatch(operations.register(values));\n        resetForm();\n    };\n\n    const renderError = message => Notify.info(`${message}`);\n\n    return (\n        <Box>\n            <FormTitle>Please register to use the Delivery service</FormTitle>\n            \n            <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={validationSchemaRegister}\n            >\n            <RegisterForm autoComplete=\"off\">\n                    <LableForm htmlFor=\"name\">\n                    Name\n                        <InputForm type=\"text\"\n                            name=\"name\"\n                            placeholder=\"Arnold Steel\"\n                        />\n                    </LableForm>\n                    <ErrorMessage name=\"name\" render={renderError} />\n\n                    <LableForm htmlFor=\"email\">\n                    Email\n                        <InputForm\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"Example@gmail.com\"        \n                        />\n                    </LableForm>\n                    <ErrorMessage name=\"email\" render={renderError} />\n\n                    <LableForm htmlFor=\"phone\">\n                    Phone\n                        <InputForm\n                            type=\"phone\"\n                            name=\"phone\"\n                            placeholder=\"+380*********\"        \n                        />\n                    </LableForm>\n                    <ErrorMessage name=\"phone\" render={renderError} />\n\n                    <LableForm htmlFor=\"password\">\n                    Password\n                        <InputForm\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"Min 8 characters\"\n                        />\n                    </LableForm>\n                    <ErrorMessage name=\"password\" render={renderError} />\n\n                    <LableForm htmlFor=\"repeat_password\">\n                    Repeat password\n                        <InputForm\n                            type=\"password\"\n                            name=\"repeat_password\"\n                            placeholder=\"Repeat password\"\n                        />\n                    </LableForm>\n                    <ErrorMessage name=\"repeat_password\" render={renderError} />\n\n                    <FormButton type=\"submit\">Register</FormButton>\n                </RegisterForm>\n            </Formik>\n        \n            <Text>Already have account?</Text>\n            <Text>\n                <Link to=\"/login\"\n                    style={{ textDecoration: \"none\", fontSize: 18, color: \"#b027da\" }}>Login\n                </Link>\n            </Text>\n        </Box>\n    );\n};","import styled from '@emotion/styled';\nimport mainFood from \"../../images/homepage.jpg\";\n\nexport const Box = styled.div`\n    box-sizing: border-box;\n    height: 100vh;\n    margin: 0px;\n    flex-direction: row;\n    background-image: url(${mainFood});\n    background-repeat: no-repeat;\n    background-color: rgb(250, 250, 250);\n    background-size: cover;\n    background-position: center center;\n`;","import RegisterForm from '../../components/RegisterForm/RegisterForm';\nimport {Box} from './RegisterPage.styled'\n\nconst RegisterPage = () => {\n    return (\n        <Box>\n            <RegisterForm />\n        </Box>\n    ) \n};\n\nexport default RegisterPage;"],"names":["Box","styled","FormTitle","RegisterForm","Form","LableForm","InputForm","Field","FormButton","Text","yup","email","required","name","password","min","phone","repeat_password","RegisterPage","dispatch","useDispatch","renderError","message","Notify","initialValues","onSubmit","values","resetForm","console","log","operations","validationSchema","validationSchemaRegister","autoComplete","htmlFor","type","placeholder","render","to","style","textDecoration","fontSize","color","mainFood"],"sourceRoot":""}